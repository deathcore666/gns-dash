import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchData } from './lineChartAPI';

export interface LineChartState {
  data: { P: [{ date: number, value: number }], L: [{ date: number, value: number }] };
  status: 'idle' | 'loading' | 'failed';
}

const initialState: LineChartState = {
  data: { P: [{ date: 0, value: 0 }], L: [{ date: 0, value: 0 }] },
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk(
    'lineChart/fetchData',
    async () => {
      const response = await fetchData();
      return response.data;
    }
);

export const lineChartSlice = createSlice({
  name: 'lineChart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setData: (state, action: PayloadAction<{ P: [{ date: number, value: number }], L: [{ date: number, value: number }] }>) => {
      state.data = action.payload;
    },
    clearData: (state) => {
      state.data = { P: [{ date: 0, value: 0 }], L: [{ date: 0, value: 0 }] };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(fetchAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(fetchAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.data = action.payload;
        });
  },
});

export const { setData, clearData } = lineChartSlice.actions;
export const selectLineChartData = (state: RootState) => state.lineChartData.data;
export default lineChartSlice.reducer;
